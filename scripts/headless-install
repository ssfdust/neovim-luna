#!/bin/bash

lspservers=(
    bash-language-server
    clangd
    deno
    lua-language-server
    pyright
    rust-analyzer
    vim-language-server
)

if [ -z "${NO_REDIR_LOG}" ];then
    logfile=$(mktemp --suffix=.nvim-log)
    echo "Logs are redirected to $logfile"
    exec 1> $logfile
    exec 2>> $logfile
fi

if [ -n "${LSP_SERVERS}" ];then
    IFS=',' read -ra lspservers <<< "${LSP_SERVERS}"
fi

source ~/.bashrc

# It's the core of the neovim configuraion
#
# All the plugins are managed by dpp.vim plugin manager. This function is used
# to bootstrap the dpp plugin manager. Make dpp plugin manager itself to be
# usable.
#
# In this step, most of the plugins aren't downloaded or loaded yet. We need to
# manually install the plugins later. After the neovim started but before the
# first command to be executed, the denops and dpp are added to runtimepath
# but not sourced, so we need to start denops manually to wait for the end of
# dpp initilization.
function init_dpp_inst() {
    if [ ! -d ~/.local/share/nvim/dpp ];then
        nvim --noplugin --headless +'autocmd User Dpp:makeStatePost qall'
    fi
}
# Install the plugins in dpp plugin manager. It won't exit utill all the plugins
# are installed, this function prevent incompleted or bad plugins during the
# initilization.
#
# The installation depends on dpp and denops.
function inst_dpp_plugins () {
    while :;
    do
        local notinstalled=$(
            nvim --headless \
                +"call denops#server#start()" \
                +"call denops#server#wait()" \
                +"echo dpp#sync_ext_action('installer', 'getNotInstalled')" \
                +qall 2>&1
        )
        if [ "$notinstalled" != "[]" ];then
            nvim --headless \
                +"call denops#server#start()" \
                +"call denops#server#wait()" \
                +'autocmd User Dpp:makeStatePost qall' \
                +"call dpp#async_ext_action('installer', 'install')"
        else
            break
        fi
    done
}

function inst_lsp_server () {
    while :;
    do
        local has_lsp_server=$(
            nvim --headless \
                +"call denops#server#start()" \
                +"call denops#server#wait()" \
                +"call dpp#source('mason.nvim')" \
                +"lua print(require[[mason-registry]].has_package[[$1]])" \
                +qall 2>&1
        )
        if [ ! "${has_lsp_server}" = "true" ];then
            echo "${1} is not a lsp tool"
            break
        fi
        local is_lsp_server_inst=$(
            nvim --headless \
                +"call denops#server#start()" \
                +"call denops#server#wait()" \
                +"call dpp#source('mason.nvim')" \
                +"lua print(require[[mason-registry]].is_installed[[$1]])" \
                +qall 2>&1
        )
        if [ "${is_lsp_server_inst}" = "true" ];then
            echo "${1} has been installed."
            break
        else
            nvim --headless \
                +"call denops#server#start()" \
                +"call denops#server#wait()" \
                +"call dpp#source('mason.nvim')" \
                +"MasonInstall $1" \
                +qall
        fi
    done
}

# Install lsp server defined in `LSP_SERVERS`, if it's not exists it will install
# the default servers.
#
# Default servers:
# -     bash-language-server
# -     clangd
# -     lua-language-server
# -     pyright
# -     rust-analyzer pyright
function lsp_tools_initilize () {
    nvim --headless \
        +"call denops#server#start()" \
        +"call denops#server#wait()" \
        +"call dpp#source('mason.nvim')" \
        +"lua require[[mason-registry]].refresh()" \
        +qall
    for lspserver in ${lspservers[@]}
    do
        inst_lsp_server "${lspserver}"
    done
}

# Install denops-shared-server plugin for neovim
#
# This plugin reduce the startup time of denops. Since the plugin is lazyload,
# we have to source the plugin by ourself. This command is not that important
# because this server is automaticly installed after neovim starts.
function setup_denops_server () {
    nvim --headless \
        +"call denops#server#start()" \
        +"call denops#server#wait()" \
        +"call dpp#source('denops-shared-server.vim')" \
        +"call denops_shared_server#install()" \
        +qall
}

# Install the treesitter plugins
#
# This function prevents incompleted treesitter plugins.
#
# When neovim starts with dpp plugins installed, it will install the default
# treesitter plugins enabled for neovim. Treesitter plugin itself doesn't provide
# any way to disable this behavior. The configuraion introduces the `NO_ENSURE_TREESITTER`
# environment.
#
# `NO_ENSURE_TREESITTER`: When this environment is set, the default plugin list
# won't be installed on neovim startup.
function inst_ts_plugins () {
    while :;
    do
        local ts_inst_log=$(nvim --headless +"call dpp#source('nvim-treesitter')" +TSUpdateSync +qall 2>&1 | grep -v 'up-to-date')
        if [ "$ts_inst_log" = "" ];then
            break
        fi
    done
}

function main () {
    # Disable automatic installation for treesitter.
    export NO_ENSURE_TREESITTER=1
    init_dpp_inst
    inst_dpp_plugins
    setup_denops_server

    # Start initilize lsp server
    lsp_tools_initilize

    # Enable automatic installation for treesitter.
    unset NO_ENSURE_TREESITTER
    inst_ts_plugins
}

main
